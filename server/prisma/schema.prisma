generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum AuthType {
  email
  facebook
  google
  apple
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  password      String?   @db.VarChar(255)
  name          String?   @db.VarChar(255)
  nickname      String?   @db.VarChar(255)
  thumbURL      String?   @db.VarChar(1024)
  photoURL      String?   @db.VarChar(1024)
  birthday      DateTime?
  gender        Gender?
  phone         String?   @db.VarChar(255)
  statusMessage String?
  verified      Boolean?  @default(false)
  lastSignedIn  DateTime?
  isOnline      Boolean?  @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt
  deletedAt     DateTime?

  profile       Profile?
  notifications Notification[]
  friends       Friend[]
  memberships   Membership[]
  blockedUsers  BlockedUser[]
  reports       Report[]       @relation("UserReport")
  messages      Message[]
  replys        Reply[]
  reactions     Reaction[]
  Friend        Friend[]       @relation("FriendFrom")
  Report        Report[]
  BlockedUser   BlockedUser[]  @relation("UserBlock")
}

model Notification {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(1024)
  device    String?   @db.VarChar(255)
  os        String?   @db.VarChar(255)
  userId    String    @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model Profile {
  id           Int       @id @default(autoincrement())
  socialId     String?   @db.VarChar(255)
  authType     AuthType?
  refreshToken String?   @db.VarChar(1024)

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
}

model Friend {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId   String
  user     User   @relation("FriendFrom", fields: [userId], references: [id])
  friendId String
  friend   User   @relation(fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model BlockedUser {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId        String
  user          User   @relation("UserBlock", fields: [userId], references: [id])
  blockedUserId String
  blockedUser   User   @relation(fields: [blockedUserId], references: [id])

  @@id([userId, blockedUserId])
}

model Report {
  id        String    @id @default(cuid())
  report    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId         String
  user           User   @relation("UserReport", fields: [userId], references: [id])
  reportedUserId String
  reportedUser   User   @relation(fields: [reportedUserId], references: [id])
}

enum MembershipType {
  owner
  admin
  member
}

enum AlertMode {
  sound
  vibrate
  silent
}

model Membership {
  alertMode      AlertMode?     @default(sound)
  membershipType MembershipType @default(member)
  isVisible      Boolean        @default(true)
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @default(now()) @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@index([updatedAt])
}

enum ChannelType {
  private
  public
  self
}

model Channel {
  id            String       @id @default(cuid())
  channelType   ChannelType
  name          String?      @db.VarChar(255)
  messages      Message[]    @relation("Message")
  membership    Membership[]
  lastMessageId String?      @db.VarChar(255)
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @default(now()) @updatedAt
  deletedAt     DateTime?
}

enum MessageType {
  text
  photo
  file
}

model Message {
  id          String      @id @default(cuid())
  messageType MessageType @default(text)
  text        String?
  imageUrls   String[]
  fileUrls    String[]
  reactions   Reaction[]
  replies     Reply[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  channelId String
  channel   Channel @relation("Message", fields: [channelId], references: [id])
  senderId  String
  sender    User    @relation(fields: [senderId], references: [id])
}

model Reply {
  id          Int         @id @default(autoincrement())
  messageType MessageType @default(text)
  text        String?
  imageUrls   String[]
  fileUrls    String[]
  reactions   Reaction[]
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt
  deletedAt   DateTime?

  senderId  String  @db.VarChar(255)
  sender    User    @relation(fields: [senderId], references: [id])
  messageId String  @db.VarChar(255)
  message   Message @relation(fields: [messageId], references: [id])
}

model Reaction {
  id        Int     @id @default(autoincrement())
  value     String  @db.VarChar(4)
  userId    String  @db.VarChar(255)
  user      User    @relation(fields: [userId], references: [id])
  messageId String  @db.VarChar(255)
  message   Message @relation(fields: [messageId], references: [id])
  replyId   Int
  reply     Reply   @relation(fields: [replyId], references: [id])
}
