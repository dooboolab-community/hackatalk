// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[GiftedChatInput] render renders without crashing 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "flexBasis": 0,
          "flexDirection": "column",
          "flexGrow": 1,
          "flexShrink": 1,
          "justifyContent": "center",
        },
      ],
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <ScrollView
    ListEmptyComponent={<View />}
    ListFooterComponent={
      <View
        style={
          Object {
            "height": 60,
          }
        }
      />
    }
    contentContainerStyle={null}
    data={
      Array [
        Object {
          "id": "",
          "message": "hello1",
          "sender": Object {
            "displayName": "sender111",
            "photoURL": "",
            "statusMsg": "",
            "thumbURL": "",
            "uid": "0",
          },
        },
        Object {
          "id": "",
          "message": "Hello2. This is long message. This is long message.This is long message.This is long message. This is long message. This is long message.This is long message. This is long message.This is long message. This is long message. This is long message.",
          "sender": Object {
            "displayName": "sender111",
            "photoURL": "",
            "statusMsg": "",
            "thumbURL": "",
            "uid": "2",
          },
        },
        Object {
          "id": "",
          "message": "hello",
          "sender": Object {
            "displayName": "sender111",
            "photoURL": "",
            "statusMsg": "",
            "thumbURL": "",
            "uid": "0",
          },
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "alignSelf": "stretch",
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View
      onLayout={[Function]}
      style={null}
    >
      <View />
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View />
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View />
    </View>
    <View
      onLayout={[Function]}
    >
      <View
        style={
          Object {
            "height": 60,
          }
        }
      />
    </View>
  </ScrollView>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "borderTopWidth": 0.5,
          "flexBasis": 0,
          "flexDirection": "row",
          "flexGrow": 1,
          "flexShrink": 1,
          "justifyContent": "space-between",
          "maxHeight": 52,
          "minHeight": 52,
          "paddingLeft": 8,
          "paddingRight": 8,
          "width": "100%",
        },
        Object {
          "backgroundColor": undefined,
          "borderColor": undefined,
        },
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      defaultValue=""
      multiline={true}
      onChangeText={[Function]}
      onFocus={[Function]}
      placeholder=""
      rejectResponderTermination={true}
      style={
        Array [
          Object {
            "color": "black",
            "fontSize": 14,
            "marginRight": 20,
            "paddingLeft": 48,
            "width": "80%",
          },
          Object {
            "backgroundColor": undefined,
            "color": undefined,
          },
        ]
      }
      testID="input_chat"
      underlineColorAndroid="transparent"
      value=""
    />
    <TouchableOpacity
      activeOpacity={0.2}
      onPress={[Function]}
      style={
        Array [
          Object {
            "height": "100%",
            "justifyContent": "center",
            "left": 10,
            "minWidth": 20,
            "position": "absolute",
          },
        ]
      }
      testID="touch_menu"
    >
      <View />
    </TouchableOpacity>
    <View
      style={
        Object {
          "flex": 1,
          "marginVertical": 8,
        }
      }
    >
      <View />
    </View>
  </View>
</View>
`;
