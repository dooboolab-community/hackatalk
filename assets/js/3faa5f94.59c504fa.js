(self.webpackChunkhackatalk_website=self.webpackChunkhackatalk_website||[]).push([[9201],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8216:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={id:"message",title:"Message",sidebar_label:"Message"},s=void 0,l={unversionedId:"server/message",id:"server/message",isDocsHomePage:!1,title:"Message",description:"Creating a message is pretty straightforward as long as you know the id of the channel you wish to send the message to.",source:"@site/docs/server/message.md",sourceDirName:"server",slug:"/server/message",permalink:"/docs/server/message",editUrl:"https://github.com/dooboolab/hackatalk/tree/main/website/docs/server/message.md",version:"current",frontMatter:{id:"message",title:"Message",sidebar_label:"Message"},sidebar:"docs",previous:{title:"Membership",permalink:"/docs/server/membership"},next:{title:"Overview",permalink:"/docs/client/overview"}},p=[{value:"Type of messages",id:"type-of-messages",children:[]},{value:"Encryption",id:"encryption",children:[]},{value:"Push Notification",id:"push-notification",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Creating a message is pretty straightforward as long as you know the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the channel you wish to send the message to."),(0,i.kt)("h2",{id:"type-of-messages"},"Type of messages"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Types of message are defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageType"),".")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"text",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Text message"))),(0,i.kt)("li",{parentName:"ol"},"photo",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Photo type will display images in the client"))),(0,i.kt)("li",{parentName:"ol"},"file",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"File type will be displayed and be presented as a downloadable link in the client")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"photo")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," will be provided by the array of string which contains urls. The urls will be provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"singleUpload")," mutation query defined in our ",(0,i.kt)("a",{parentName:"p",href:"http://hackatalk.azurewebsites.net/graphql"},"HackaTalk's graphql server"),"."),(0,i.kt)("h2",{id:"encryption"},"Encryption"),(0,i.kt)("p",null,"The encryption is being done in the ",(0,i.kt)("strong",{parentName:"p"},"text")," message only. This should be ",(0,i.kt)("strong",{parentName:"p"},"encrypted")," and ",(0,i.kt)("strong",{parentName:"p"},"decrpyted")," when communicating with the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Database"},"database"),". We are using ",(0,i.kt)("a",{parentName:"p",href:"https://encode-decode.com/aes-192-cbc-encrypt-online"},"aes-192-cbc")," algorithm with ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/crypto.html"},"crypto")," package in ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org"},"nodejs"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can read more about it in ",(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/api/crypto.html"},"nodejs crypto"),".")),(0,i.kt)("h2",{id:"push-notification"},"Push Notification"),(0,i.kt)("p",null,"There are push token ids in every devices and browsers. They are used to receive ",(0,i.kt)("strong",{parentName:"p"},"push notification")," in their devices. Push token in the device is sent to the server when user sign-in. ",(0,i.kt)("inlineCode",{parentName:"p"},"createNotification")," mutation will be called on the client-side. The ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the user and the device's ",(0,i.kt)("inlineCode",{parentName:"p"},"push token")," will be mapped in the database and they will be used to send messages via ",(0,i.kt)("strong",{parentName:"p"},"push notification"),". This will be removed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"deleteNotification")," mutation query when the user signs out."))}u.isMDXComponent=!0}}]);