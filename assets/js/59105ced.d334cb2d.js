(self.webpackChunkhackatalk_website=self.webpackChunkhackatalk_website||[]).push([[934],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(n),d=r,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||i;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1597:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={id:"features",title:"Features",sidebar_label:"Features"},o=void 0,s={unversionedId:"implementation/features",id:"implementation/features",isDocsHomePage:!1,title:"Features",description:"Features mainly describes what services we provide to HackaTalk users. We generally provide one-to-one as well as group chats. We would like to provide and try out things that can be done with a modern chat app.",source:"@site/docs/implementation/features.md",sourceDirName:"implementation",slug:"/implementation/features",permalink:"/docs/implementation/features",editUrl:"https://github.com/dooboolab/hackatalk/tree/main/website/docs/implementation/features.md",version:"current",frontMatter:{id:"features",title:"Features",sidebar_label:"Features"},sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/implementation/authentication"},next:{title:"Pagination",permalink:"/docs/implementation/pagination"}},c=[{value:"Creating Channel",id:"creating-channel",children:[{value:"Updating or deleting Channel",id:"updating-or-deleting-channel",children:[]}]},{value:"Adding friends to your chat app",id:"adding-friends-to-your-chat-app",children:[]},{value:"Start messaging",id:"start-messaging",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Features mainly describes what services we provide to ",(0,i.kt)("inlineCode",{parentName:"p"},"HackaTalk")," users. We generally provide ",(0,i.kt)("strong",{parentName:"p"},"one-to-one")," as well as ",(0,i.kt)("strong",{parentName:"p"},"group")," chats. We would like to provide and try out things that can be done with a modern chat app."),(0,i.kt)("h2",{id:"creating-channel"},"Creating Channel"),(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/27461460/89128311-d875cf00-d52f-11ea-9107-2ee2e6fe2e58.png",width:"200"}),(0,i.kt)("p",null,"Creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"channel")," is creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"chatroom"),". If the user creates the channel manually selecting other users they wish to chat with, this will be a ",(0,i.kt)("strong",{parentName:"p"},"private")," channel as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"1-1 chat"),". We have another channel type ",(0,i.kt)("strong",{parentName:"p"},"public")," and this is used for public messaging. To create a ",(0,i.kt)("strong",{parentName:"p"},"public")," channel, users will type in the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," of channel and get an unique id for that ",(0,i.kt)("strong",{parentName:"p"},"channel"),". Then the user can invite other users to the ",(0,i.kt)("strong",{parentName:"p"},"public")," channel with that unique id. Below are 3 general senarios listed. "),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"createChannel(channel: ChannelCreateInput): Channel\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"1-1 private chat",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Users select one user when creating ",(0,i.kt)("inlineCode",{parentName:"li"},"Channel"),"."))),(0,i.kt)("li",{parentName:"ol"},"M-M private chat",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Users create a channel with multiple users.",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Note that the private channel will not be created again if the same list of users already exists in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel"),"."))))),(0,i.kt)("li",{parentName:"ol"},"M-M public chat",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Users create a channel with only the name of channel and recieve a unique id.",(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Note that this can be duplicated (name, list of users ...).")))))),(0,i.kt)("br",null),"A `Membership` is a [single table inheritance](https://en.wikipedia.org/wiki/Single_Table_Inheritance) where `Users` manage the alert mode and `Owner` of the chatroom manages user\u2019s role. The `User` that creates a `Channel` is the `Owner`. The `owner` manages the `role` of each user in the `Channel` as well as the `alertMode`. The `alertMode` allows you to `mute` specific channel or change the sound mode to `vibrate`. Individual users can also manage the ownership. Their relationship as in [RDBMS](https://techterms.com/definition/rdbms) looks like below.",(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/27461460/89128370-3b676600-d530-11ea-9c10-e2d133fed021.png",width:"400"}),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"updating-or-deleting-channel"},"Updating or deleting Channel"),(0,i.kt)("p",null,"Only the ",(0,i.kt)("inlineCode",{parentName:"p"},"Role")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," can update the channels. We follow the ",(0,i.kt)("a",{parentName:"p",href:"https://guides.cfwheels.org/docs/soft-delete"},"soft delete")," senario for main models which are ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel"),". Other sub models that can be refered as ",(0,i.kt)("inlineCode",{parentName:"p"},"cascade")," will not follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"soft deletion"),".",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"adding-friends-to-your-chat-app"},"Adding friends to your chat app"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"HacakTalk")," allows users to search all users who've signed up."),(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/27461460/89128315-dad82900-d52f-11ea-9e1b-5a5fd4f29010.png",width:"200"}),(0,i.kt)("p",null,"From above screen which is ",(0,i.kt)("inlineCode",{parentName:"p"},"SearchUser"),", you can add user to the friend list or chat directly."),(0,i.kt)("h2",{id:"start-messaging"},"Start messaging"),(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/27461460/89128308-d6ac0b80-d52f-11ea-9368-ebe6e7cb9d15.png",width:"200"}),(0,i.kt)("p",null,"When a user tries to chat with a new user but the ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel")," doesn't exist, it will automatically create one internally. This flow follows the ",(0,i.kt)("a",{parentName:"p",href:"#creating-channel"},"Creating channel")," flow described above."),(0,i.kt)("p",null,"Currently we provide 3 types of messages."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Text"),(0,i.kt)("li",{parentName:"ol"},"Photo"),(0,i.kt)("li",{parentName:"ol"},"File")))}u.isMDXComponent=!0}}]);