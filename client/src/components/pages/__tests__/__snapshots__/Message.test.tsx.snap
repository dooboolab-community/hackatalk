// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Message] rendering test renders as expected 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#000",
          "flexBasis": 0,
          "flexDirection": "column",
          "flexGrow": 1,
          "flexShrink": 1,
        },
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Array [
            Object {
              "alignItems": "center",
              "alignSelf": "stretch",
              "flexBasis": 0,
              "flexDirection": "column",
              "flexGrow": 1,
              "flexShrink": 1,
              "justifyContent": "center",
            },
            undefined,
          ],
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <RCTScrollView
        ListEmptyComponent={
          <Shared
            style={
              Object {
                "alignItems": "center",
                "alignSelf": "stretch",
                "flex": 1,
                "justifyContent": "center",
                "width": "100%",
              }
            }
          >
            No content
          </Shared>
        }
        ListHeaderComponent={
          <View
            style={
              Object {
                "height": 28,
              }
            }
          />
        }
        contentContainerStyle={null}
        data={
          Array [
            Object {
              "__fragmentOwner": Object {
                "cacheConfig": Object {
                  "force": true,
                },
                "identifier": "1ff7872b58757bca9b62f46b886f16b8{\\"after\\":null,\\"channelId\\":\\"abcdef\\",\\"first\\":20,\\"searchText\\":null}",
                "node": Object {
                  "fragment": Object {
                    "abstractKey": null,
                    "argumentDefinitions": Array [
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "after",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "channelId",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "first",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "searchText",
                      },
                    ],
                    "kind": "Fragment",
                    "metadata": null,
                    "name": "MessagesQuery",
                    "selections": Array [
                      Object {
                        "args": Array [
                          Object {
                            "kind": "Variable",
                            "name": "after",
                            "variableName": "after",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "channelId",
                            "variableName": "channelId",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "first",
                            "variableName": "first",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "searchText",
                            "variableName": "searchText",
                          },
                        ],
                        "kind": "FragmentSpread",
                        "name": "MessageComponent_message",
                      },
                    ],
                    "type": "Query",
                  },
                  "hash": "06622ff6f54faabf675e48932f249991",
                  "kind": "Request",
                  "operation": Object {
                    "argumentDefinitions": Array [
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "first",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "after",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "channelId",
                      },
                      Object {
                        "defaultValue": null,
                        "kind": "LocalArgument",
                        "name": "searchText",
                      },
                    ],
                    "kind": "Operation",
                    "name": "MessagesQuery",
                    "selections": Array [
                      Object {
                        "alias": null,
                        "args": Array [
                          Object {
                            "kind": "Variable",
                            "name": "after",
                            "variableName": "after",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "channelId",
                            "variableName": "channelId",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "first",
                            "variableName": "first",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "searchText",
                            "variableName": "searchText",
                          },
                        ],
                        "concreteType": "MessageConnection",
                        "kind": "LinkedField",
                        "name": "messages",
                        "plural": false,
                        "selections": Array [
                          Object {
                            "alias": null,
                            "args": null,
                            "concreteType": "MessageEdge",
                            "kind": "LinkedField",
                            "name": "edges",
                            "plural": true,
                            "selections": Array [
                              Object {
                                "alias": null,
                                "args": null,
                                "kind": "ScalarField",
                                "name": "cursor",
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "concreteType": "Message",
                                "kind": "LinkedField",
                                "name": "node",
                                "plural": false,
                                "selections": Array [
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "id",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "imageUrls",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "fileUrls",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "text",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "concreteType": "User",
                                    "kind": "LinkedField",
                                    "name": "sender",
                                    "plural": false,
                                    "selections": Array [
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "id",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "name",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "nickname",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "photoURL",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "thumbURL",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "hasBlocked",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "statusMessage",
                                        "storageKey": null,
                                      },
                                      Object {
                                        "alias": null,
                                        "args": null,
                                        "kind": "ScalarField",
                                        "name": "isFriend",
                                        "storageKey": null,
                                      },
                                    ],
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "createdAt",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "messageType",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "updatedAt",
                                    "storageKey": null,
                                  },
                                  Object {
                                    "alias": null,
                                    "args": null,
                                    "kind": "ScalarField",
                                    "name": "__typename",
                                    "storageKey": null,
                                  },
                                ],
                                "storageKey": null,
                              },
                            ],
                            "storageKey": null,
                          },
                          Object {
                            "alias": null,
                            "args": null,
                            "concreteType": "PageInfo",
                            "kind": "LinkedField",
                            "name": "pageInfo",
                            "plural": false,
                            "selections": Array [
                              Object {
                                "alias": null,
                                "args": null,
                                "kind": "ScalarField",
                                "name": "hasNextPage",
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "kind": "ScalarField",
                                "name": "hasPreviousPage",
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "kind": "ScalarField",
                                "name": "startCursor",
                                "storageKey": null,
                              },
                              Object {
                                "alias": null,
                                "args": null,
                                "kind": "ScalarField",
                                "name": "endCursor",
                                "storageKey": null,
                              },
                            ],
                            "storageKey": null,
                          },
                        ],
                        "storageKey": null,
                      },
                      Object {
                        "alias": null,
                        "args": Array [
                          Object {
                            "kind": "Variable",
                            "name": "after",
                            "variableName": "after",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "channelId",
                            "variableName": "channelId",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "first",
                            "variableName": "first",
                          },
                          Object {
                            "kind": "Variable",
                            "name": "searchText",
                            "variableName": "searchText",
                          },
                        ],
                        "filters": Array [
                          "channelId",
                          "searchText",
                        ],
                        "handle": "connection",
                        "key": "MessageComponent_messages",
                        "kind": "LinkedHandle",
                        "name": "messages",
                      },
                    ],
                  },
                  "params": Object {
                    "cacheID": "1ff7872b58757bca9b62f46b886f16b8",
                    "id": null,
                    "metadata": Object {},
                    "name": "MessagesQuery",
                    "operationKind": "query",
                    "text": "query MessagesQuery(
  $first: Int!
  $after: String
  $channelId: String!
  $searchText: String
) {
  ...MessageComponent_message_WlZsr
}

fragment MessageComponent_message_WlZsr on Query {
  messages(first: $first, after: $after, channelId: $channelId, searchText: $searchText) {
    edges {
      cursor
      node {
        id
        imageUrls
        fileUrls
        text
        sender {
          id
          name
          nickname
          photoURL
        }
        createdAt
        ...MessageListItem_message
        __typename
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

fragment MessageListItem_message on Message {
  id
  messageType
  text
  imageUrls
  fileUrls
  createdAt
  updatedAt
  sender {
    id
    name
    nickname
    thumbURL
    photoURL
    ...ProfileModal_user
  }
}

fragment ProfileModal_user on User {
  id
  photoURL
  name
  nickname
  hasBlocked
  statusMessage
  isFriend
}
",
                  },
                },
                "variables": Object {
                  "after": null,
                  "channelId": "abcdef",
                  "first": 20,
                  "searchText": null,
                },
              },
              "__fragments": Object {
                "MessageListItem_message": Object {},
              },
              "__id": "test-message-1",
              "__isWithinUnmatchedTypeRefinement": false,
              "__typename": "Message",
              "createdAt": "2021-03-19T04:30:30.162Z",
              "fileUrls": "<mock-value-for-field-\\"fileUrls\\">",
              "id": "test-message-1",
              "imageUrls": "<mock-value-for-field-\\"imageUrls\\">",
              "sender": Object {
                "id": "test-user-111",
                "name": "John Doe",
                "nickname": "john",
                "photoURL": "<mock-value-for-field-\\"photoURL\\">",
              },
              "text": "Hello there!",
            },
          ]
        }
        getItem={[Function]}
        getItemCount={[Function]}
        invertStickyHeaders={true}
        inverted={true}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onEndReached={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        style={
          Array [
            Object {
              "transform": Array [
                Object {
                  "scaleY": -1,
                },
              ],
            },
            Object {
              "alignSelf": "stretch",
            },
          ]
        }
        viewabilityConfigCallbackPairs={Array []}
      >
        <View>
          <View
            onLayout={[Function]}
            style={
              Object {
                "transform": Array [
                  Object {
                    "scaleY": -1,
                  },
                ],
              }
            }
          >
            <View
              style={
                Object {
                  "height": 28,
                }
              }
            />
          </View>
          <View
            onLayout={[Function]}
            style={
              Array [
                Object {
                  "flexDirection": "column-reverse",
                },
                Object {
                  "transform": Array [
                    Object {
                      "scaleY": -1,
                    },
                  ],
                },
              ]
            }
          >
            <View
              shouldShowDatePeer={true}
              style={
                Array [
                  Object {
                    "alignItems": "flex-start",
                    "flexDirection": "row",
                    "justifyContent": "flex-start",
                    "marginLeft": 20,
                    "marginRight": 8,
                    "marginTop": 8,
                    "minHeight": 48,
                    "width": "100%",
                  },
                  undefined,
                ]
              }
            >
              <View
                style={
                  Object {
                    "marginRight": 8,
                    "width": 40,
                  }
                }
              >
                <View
                  accessible={true}
                  collapsable={false}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                  testID="message-list-item0"
                >
                  <Image
                    accessibilityHint="sender image"
                    accessible={true}
                    source={
                      Object {
                        "uri": "https://example.com/john-profile.jpg",
                      }
                    }
                    style={
                      Array [
                        Object {
                          "borderBottomLeftRadius": 16,
                          "borderBottomRightRadius": 16,
                          "borderTopLeftRadius": 16,
                          "borderTopRightRadius": 16,
                          "height": 32,
                          "width": 32,
                        },
                        undefined,
                      ]
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "flexDirection": "column",
                    "maxWidth": "80%",
                  }
                }
              >
                <Text
                  style={
                    Array [
                      Object {
                        "color": "white",
                        "fontSize": 12,
                        "marginBottom": 2,
                      },
                      undefined,
                    ]
                  }
                >
                  john
                </Text>
                <View
                  style={
                    Object {
                      "flexDirection": "row",
                      "justifyContent": "flex-start",
                    }
                  }
                >
                  <View
                    style={
                      Array [
                        Object {
                          "backgroundColor": "#E2F2FF",
                          "marginRight": 8,
                          "paddingBottom": 12,
                          "paddingLeft": 12,
                          "paddingRight": 12,
                          "paddingTop": 12,
                        },
                        undefined,
                      ]
                    }
                  >
                    <Text
                      selectable={true}
                      style={
                        Array [
                          Object {
                            "color": "black",
                            "fontSize": 14,
                          },
                          undefined,
                        ]
                      }
                    >
                      <Text>
                        <Text
                          style={
                            Array [
                              undefined,
                              undefined,
                            ]
                          }
                        >
                          Hello there!
                        </Text>
                      </Text>
                    </Text>
                  </View>
                </View>
                <Text
                  style={
                    Array [
                      Object {
                        "color": "#C4C4C4",
                        "fontSize": 12,
                        "marginRight": 20,
                        "marginTop": 4,
                      },
                      undefined,
                    ]
                  }
                >
                  a few seconds ago
                </Text>
              </View>
            </View>
          </View>
        </View>
      </RCTScrollView>
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "borderBottomColor": "#515151",
              "borderLeftColor": "#515151",
              "borderRightColor": "#515151",
              "borderTopColor": "#515151",
              "borderTopWidth": 0.3,
              "flexBasis": 0,
              "flexDirection": "row",
              "flexGrow": 1,
              "flexShrink": 1,
              "justifyContent": "space-between",
              "maxHeight": 56,
              "maxWidth": "100%",
              "minHeight": 56,
              "paddingLeft": 8,
              "paddingRight": 8,
              "width": "100%",
            },
            Object {
              "backgroundColor": "#000",
              "borderColor": "#515151",
            },
          ]
        }
      >
        <TextInput
          enablesReturnKeyAutomatically={true}
          multiline={true}
          onChangeText={[Function]}
          onFocus={[Function]}
          onKeyPress={[Function]}
          onSelectionChange={[Function]}
          placeholder="Write message..."
          returnKeyType="done"
          style={
            Array [
              Object {
                "fontSize": 14,
                "paddingBottom": 4,
                "paddingLeft": 40,
              },
              Object {
                "backgroundColor": "#000",
                "color": "white",
                "flex": 1,
                "marginRight": 10,
                "paddingVertical": 12,
              },
            ]
          }
          testID="input-chat"
          value=""
        />
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "height": "100%",
              "justifyContent": "center",
              "left": 10,
              "minWidth": 20,
              "opacity": 1,
              "paddingBottom": 4,
              "paddingLeft": 4,
              "paddingRight": 4,
              "paddingTop": 4,
              "position": "absolute",
            }
          }
          testID="touch-menu"
        >
          <SvgMock
            height={18}
            stroke="white"
            width={18}
          />
        </View>
        <View
          accessibilityRole="button"
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
              }
            }
          >
            <SvgMock
              fill="#8BC9FF"
            />
          </View>
        </View>
      </View>
    </View>
  </RCTSafeAreaView>
</RNCSafeAreaProvider>
`;
