// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[GiftedChatInput] render renders without crashing 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      [
        [
          {
            "alignItems": "center",
            "alignSelf": "stretch",
            "flexBasis": 0,
            "flexDirection": "column",
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "center",
          },
          undefined,
        ],
        {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <RCTScrollView
      ListEmptyComponent={<View />}
      ListHeaderComponent={
        <View
          style={
            {
              "height": 28,
            }
          }
        />
      }
      contentContainerStyle={null}
      data={
        [
          {
            "id": "abcde",
            "message": "hello1",
            "sender": {
              "id": "0",
              "nickname": "sender111",
              "photoURL": "",
              "statusMessage": "",
              "thumbURL": "",
            },
          },
          {
            "id": "xyz",
            "message": "Hello2. This is long message. This is long message.This is long message.This is long message. This is long message. This is long message.This is long message. This is long message.This is long message. This is long message. This is long message.",
            "sender": {
              "id": "2",
              "nickname": "sender111",
              "photoURL": "",
              "statusMessage": "",
              "thumbURL": "",
            },
          },
          {
            "id": "pqr",
            "message": "hello",
            "sender": {
              "id": "0",
              "nickname": "sender111",
              "photoURL": "",
              "statusMessage": "",
              "thumbURL": "",
            },
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      invertStickyHeaders={true}
      inverted={true}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={[]}
      style={
        [
          {
            "transform": [
              {
                "scaleY": -1,
              },
            ],
          },
          {
            "alignSelf": "stretch",
          },
        ]
      }
      viewabilityConfigCallbackPairs={[]}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            {
              "transform": [
                {
                  "scaleY": -1,
                },
              ],
            }
          }
        >
          <View
            style={
              {
                "height": 28,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "column-reverse",
              },
              {
                "transform": [
                  {
                    "scaleY": -1,
                  },
                ],
              },
            ]
          }
        >
          <View />
        </View>
        <View
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "column-reverse",
              },
              {
                "transform": [
                  {
                    "scaleY": -1,
                  },
                ],
              },
            ]
          }
        >
          <View />
        </View>
        <View
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "column-reverse",
              },
              {
                "transform": [
                  {
                    "scaleY": -1,
                  },
                ],
              },
            ]
          }
        >
          <View />
        </View>
      </View>
    </RCTScrollView>
    <View
      style={
        [
          {
            "alignItems": "center",
            "borderBottomColor": "#515151",
            "borderLeftColor": "#515151",
            "borderRightColor": "#515151",
            "borderTopColor": "#515151",
            "borderTopWidth": 0.3,
            "flexBasis": 0,
            "flexDirection": "row",
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "space-between",
            "maxHeight": 56,
            "maxWidth": "100%",
            "minHeight": 56,
            "paddingLeft": 8,
            "paddingRight": 8,
            "width": "100%",
          },
          {
            "backgroundColor": undefined,
            "borderColor": undefined,
          },
        ]
      }
    >
      <TextInput
        enablesReturnKeyAutomatically={true}
        multiline={true}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder=""
        returnKeyType="done"
        style={
          [
            {
              "fontSize": 14,
              "paddingBottom": 4,
              "paddingLeft": 40,
            },
            {
              "backgroundColor": undefined,
              "color": undefined,
              "flex": 1,
              "marginRight": 10,
              "paddingVertical": 12,
            },
          ]
        }
        testID="input-chat"
        value=""
      />
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "height": "100%",
            "justifyContent": "center",
            "left": 10,
            "minWidth": 20,
            "opacity": 1,
            "paddingBottom": 4,
            "paddingLeft": 4,
            "paddingRight": 4,
            "paddingTop": 4,
            "position": "absolute",
          }
        }
        testID="touch-menu"
      />
      <View />
    </View>
  </View>
</RNCSafeAreaProvider>
`;
